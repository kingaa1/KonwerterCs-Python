parser grammar CSharpParser;


program
    : (declaration)* EOF
    ;

declaration
    :  function_definition | class_definition | statement
    ;



function_definition  
    : (variable_type | VOID) identifier LEFTROUND RIGHTROUND LEFTCURLY (statement | function_declaration)* RIGHTCURLY
    ;


statement
    : variable_declaration SEMICOLON
    | variable_assignment SEMICOLON
    | IF LEFTROUND expression RIGHTROUND LEFTCURLY statement* RIGHTCURLY
        (ELSE LEFTCURLY statement* RIGHTCURLY)?
    | WHILE LEFTROUND expression RIGHTROUND LEFTCURLY statement* RIGHTCURLY
    | DO LEFTCURLY statement* RIGHTCURLY
        WHILE LEFTROUND expression RIGHTROUND
        SEMICOLON
    | FOR LEFTROUND
        variable_declaration SEMICOLON
        expression SEMICOLON
        expression RIGHTROUND
        statement
    | RETURN expression SEMICOLON
    | expression SEMICOLON
    ;


variable_declaration
    : (variable_type | VAR) identifier (EQUALS expression)? 
    ;

variable_type
    : BOOL
    | DECIMAL
    | SHORT
    | CHAR
    | INT
    | LONG
    | FLOAT
    | DOUBLE
    ;



class_declaration
    : CLASS identifier OPEN_BRACE (class_member_declarations)+ CLOSE_BRACE 
    ;


class_member_declaration
    : attributes? all_member_modifiers?  ////////////////////////////
    ;

attributes
    : attribute_section+              ///////////////////////
    ;

attribute_section
    : '[' (attribute_target ':')? attribute_list ','? ']'
    ;

attribute_target
    : keyword
    | identifier
    ;

attribute_list
    : attribute (',' attribute)*
    ;

attribute
    :  (
        OPEN_PARENS (attribute_argument (',' attribute_argument)*)? CLOSE_PARENS
    )?
    ;

attribute_argument
    : (identifier ':')? expression
    ;


all_member_modifier
    : PUBLIC
    | PROTECTED
    | PRIVATE
    | VOLATILE
    | VIRTUAL
    | SEALED
    | OVERRIDE
    | ABSTRACT
    ;




arg_declaration
    : base_type identifier ('=' expression)?
    ;

variable_assignment
    : identifier '=' expression 
    ;


base_type
    : simple_type
    | class_type 
    | VOID '*'
    ;

simple_type
    : BOOL
    | numeric_type
    ;

numeric_type
    : integral_type
    | floating_point_type
    | DECIMAL
    ;

integral_type
    : SHORT
    | CHAR
    | INT
    | LONG
    ;

floating_point_type
    : FLOAT
    | DOUBLE
    ;


boolean_literal
    : TRUE
    | FALSE
    ;

keyword
    : ABSTRACT
    | BOOL
    | CATCH
    | CLASS
    | FALSE
    | FLOAT
    | FOR
    | FOREACH
    | INT
    | LONG
    | OVERRIDE
    | PRIVATE
    | PROTECTED
    | PUBLIC
    | RETURN
    | STRING
    | THROW
    | TRUE
    | TRY
    | VOID
    ;
