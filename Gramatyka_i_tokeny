parser grammar CSharpParser;



program
    : (declaration)* EOF
    ;

declaration
    :  function_definition | class_definition | statement
    ;

function_definition  
    : (variable_type | VOID) identifier LEFTROUND RIGHTROUND LEFTCURLY 
      (statement | function_declaration)*  RIGHTCURLY   
       // można ewentualnie rozbić na wiele przypadków, tak aby typ zwracany pasował do typu funkcji
    ;


statement
    : variable_declaration SEMICOLON
    | variable_assignment SEMICOLON
    | IF LEFTROUND expression RIGHTROUND LEFTCURLY statement* RIGHTCURLY
        (ELSE LEFTCURLY statement* RIGHTCURLY)?
    | WHILE LEFTROUND expression RIGHTROUND LEFTCURLY statement* RIGHTCURLY
    | DO LEFTCURLY statement* RIGHTCURLY
        WHILE LEFTROUND expression RIGHTROUND
        SEMICOLON
    | FOR LEFTROUND
        variable_declaration SEMICOLON
        expression SEMICOLON
        expression RIGHTROUND
        statement
    | RETURN expression SEMICOLON
    | expression SEMICOLON
    ;


variable_declaration
    : (variable_type | VAR) identifier (EQUALS expression)? 
    ;

variable_type
    : BOOL
    | DECIMAL
    | SHORT
    | CHAR
    | INT
    | LONG
    | FLOAT
    | DOUBLE
    ;



class_declaration
    : class_type CLASS identifier LEFTCURLY 
      (all_member_modifier? function_definition | all_member_modifier? variable_declaration SEMICOLON)+ RIGHTCURLY 
    ;


all_member_modifier
    : PUBLIC
    | PROTECTED
    | PRIVATE 
    ;



variable_assignment
    : identifier EQUALS expression
    ;



boolean_literal
    : TRUE
    | FALSE
    ;

expression
    : rvalue?
    ;

rvalue
    : LEFTROUND rvalue RIGHTROUND
    | lvalue LeftRound expression RightRound
    | (ADD | SUB ) rvalue
    | NOT rvalue  
    | rvalue (MULT | DIV | MOD) rvalue
    | rvalue (ADD | SUB) rvalue
    | rvalue (LESS | LESSOREQUAL | GREATER | GREATEROREQUAL) rvalue
    | rvalue (EQUAL | NOTEQUAL) rvalue
    | rvalue AND rvalue
    | rvalue OR rvalue
    | lvalue ASSIGN rvalue
    | rvalue COMMA rvalue
    | lvalue
    | IntLiteral
    | FloatLiteral
    | CharLiteral
    | Identifier
    ;



ADD             : '+';
SUBSTRACT       : '-';
MULTIPLY        : '*';
DIVIDE          : '/';

EQUAL           : '==';
NOTEQUAL        : '!=';
LESS            : '<';
LESSOREQUAL     : '<=';
GREATER         : '>';
GREATEROREQUAL  : '>=';

AND             : '&&';
OR              : '||';
NOT             : '!';

LEFTROUND       : '(';
RIGHTROUND      : ')';
LEFTCURLY       : '{';
RIGHTCURLY      : '}';

SEMICOLON       : ';';
